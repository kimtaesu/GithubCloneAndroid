/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Shared file between builds so that they can all use the same dependencies and
 * maven repositories.
 **/
ext.deps = [:]
def versions = [:]
versions.arch_core = "1.1.1"
versions.room = "1.1.1"
versions.lifecycle = "1.1.1"
versions.support = "27.1.1"
versions.dagger = "2.16"
versions.junit = "4.12"
versions.espresso = "3.0.1"
versions.retrofit = "2.3.0"
versions.okhttp_logging_interceptor = "3.9.0"
versions.mockwebserver = "3.8.1"
versions.apache_commons = "2.5"
versions.mockito = "2.7.19"
versions.mockito_all = "1.10.19"
versions.mockito_android = "2.22.0"
versions.dexmaker = "2.2.0"
versions.constraint_layout = "1.1.0"
versions.glide = "4.7.1"
versions.timber = "4.5.1"
versions.android_gradle_plugin = '3.2.1'
versions.rxjava2 = "2.1.3"
versions.rx_android = "2.0.1"
versions.atsl_runner = "1.1.0"
versions.atsl_rules = "1.1.0"
versions.hamcrest = "1.3"
versions.kotlin = "1.3.0"
versions.paging = "1.0.1"
versions.work = "1.0.0-alpha10"
versions.navigation = "1.0.0-alpha07"
versions.navigation_testing = "1.0.0-alpha06"
versions.firebase = "16.0.0"
versions.leakcanary = "1.6.1"
versions.coroutines = "0.25.0"
versions.pattern = "1.0.0"
versions.kluent = '1.30'
versions.rxBinding = "3.0.0-alpha1"
versions.androidX = [:]
versions.androidX.compat = '1.0.0'
versions.androidX.room = '2.1.0-alpha01'
versions.androidX.lifecycle = '2.0.0'
versions.androidX.espresso = "3.1.0"
versions.androidX.monitor = "1.1.0-beta02"
versions.androidX.arch = "2.0.0"

def deps = [:]

def androidX = [:]
androidX.appCompat = "androidx.appcompat:appcompat:$versions.androidX.compat"
androidX.preference = "androidx.preference:preference:$versions.androidX.compat"
androidX.recyclerview = "androidx.recyclerview:recyclerview:$versions.androidX.compat"
androidX.cardview = "androidx.cardview:cardview:$versions.androidX.compat"
androidX.material = "com.google.android.material:material:$versions.androidX.compat"

androidX.room = [:]
androidX.room.runtime = "androidx.room:room-runtime:$versions.androidX.room"
androidX.room.rxjava2 = "androidx.room:room-rxjava2:$versions.androidX.room"
androidX.room.compiler = "androidx.room:room-compiler:$versions.androidX.room"

androidX.lifecycle = [:]
androidX.lifecycle.runtime = "androidx.lifecycle:lifecycle-runtime:$versions.androidX.lifecycle"
androidX.lifecycle.extensions = "androidx.lifecycle:lifecycle-extensions:$versions.androidX.lifecycle"
androidX.lifecycle.commonJava8 = "androidx.lifecycle:lifecycle-common-java8:$versions.androidX.lifecycle"
androidX.lifecycle.compiler = "androidx.lifecycle:lifecycle-compiler:$versions.androidX.lifecycle"

androidX.test = [:]
androidX.test.espressoCore = "androidx.test.espresso:espresso-core:$versions.androidX.espresso"
androidX.test.espressoWeb = "androidx.test.espresso:espresso-web:$versions.androidX.espresso"
androidX.test.espressoContrib = "androidx.test.espresso:espresso-contrib:$versions.androidX.espresso"
androidX.test.espressoIntents = "androidx.test.espresso:espresso-intents:$versions.androidX.espresso"
androidX.test.monitor = "androidx.test:monitor:$versions.androidX.monitor"
androidX.test.archCore = "androidx.arch.core:core-testing:$versions.androidX.arch"
androidX.test.core = "androidx.test:core:1.0.0-beta02"
androidX.test.runner = 'androidx.test:runner:1.1.0'
androidX.test.rules = 'androidx.test:rules:1.1.0'
androidX.test.extJunit = "androidx.test.ext:junit:1.0.0"

androidX.constraintlayout = "androidx.constraintlayout:constraintlayout:2.0.0-alpha2"
deps.androidX = androidX

def kotlintest = [:]
kotlintest.assertions = "io.kotlintest:kotlintest-assertions:3.1.10"
deps.kotlintest = kotlintest

def support = [:]
support.annotations = "com.android.support:support-annotations:$versions.support"
support.app_compat = "com.android.support:appcompat-v7:$versions.support"
support.compat_preference = "com.android.support:preference-v7:$versions.support"
support.recyclerview = "com.android.support:recyclerview-v7:$versions.support"
support.cardview = "com.android.support:cardview-v7:$versions.support"
support.design = "com.android.support:design:$versions.support"
support.v4 = "com.android.support:support-v4:$versions.support"
support.core_utils = "com.android.support:support-core-utils:$versions.support"
deps.support = support

def room = [:]
room.runtime = "android.arch.persistence.room:runtime:$versions.room"
room.compiler = "android.arch.persistence.room:compiler:$versions.room"
room.rxjava2 = "android.arch.persistence.room:rxjava2:$versions.room"
room.testing = "android.arch.persistence.room:testing:$versions.room"
deps.room = room

def lifecycle = [:]
lifecycle.runtime = "android.arch.lifecycle:runtime:$versions.lifecycle"
lifecycle.extensions = "android.arch.lifecycle:extensions:$versions.lifecycle"
lifecycle.java8 = "android.arch.lifecycle:common-java8:$versions.lifecycle"
lifecycle.compiler = "android.arch.lifecycle:compiler:$versions.lifecycle"
deps.lifecycle = lifecycle

def arch_core = [:]
arch_core.testing = "android.arch.core:core-testing:$versions.arch_core"
deps.arch_core = arch_core

def retrofit = [:]
retrofit.runtime = "com.squareup.retrofit2:retrofit:$versions.retrofit"
retrofit.gson = "com.squareup.retrofit2:converter-gson:$versions.retrofit"
retrofit.mock = "com.squareup.retrofit2:retrofit-mock:$versions.retrofit"
retrofit.rxjava = "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
deps.retrofit = retrofit
deps.okhttp_logging_interceptor = "com.squareup.okhttp3:logging-interceptor:${versions.okhttp_logging_interceptor}"

def dagger = [:]
dagger.runtime = "com.google.dagger:dagger:$versions.dagger"
dagger.android = "com.google.dagger:dagger-android:$versions.dagger"
dagger.android_support = "com.google.dagger:dagger-android-support:$versions.dagger"
dagger.compiler = "com.google.dagger:dagger-compiler:$versions.dagger"
dagger.android_support_compiler = "com.google.dagger:dagger-android-processor:$versions.dagger"

deps.dagger = dagger

def espresso = [:]
espresso.core = "com.android.support.test.espresso:espresso-core:$versions.espresso"
espresso.contrib = "com.android.support.test.espresso:espresso-contrib:$versions.espresso"
espresso.intents = "com.android.support.test.espresso:espresso-intents:$versions.espresso"
deps.espresso = espresso

def atsl = [:]
atsl.runner = "com.android.support.test:runner:$versions.atsl_runner"
atsl.rules = "com.android.support.test:rules:$versions.atsl_runner"
atsl.monitor = "com.android.support.test:monitor:$versions.atsl_runner"
deps.atsl = atsl

def mockito = [:]
mockito.core = "org.mockito:mockito-core:$versions.mockito"
mockito.all = "org.mockito:mockito-all:$versions.mockito_all"
mockito.android = "org.mockito:mockito-android:$versions.mockito_android"
deps.mockito = mockito

def firebase = [:]
firebase.remoteConfig = "com.google.firebase:firebase-config:$versions.firebase"
firebase.core = "com.google.firebase:firebase-core:$versions.firebase"
deps.firebase = firebase


def rxBinding = [:]
rxBinding.binding = "com.jakewharton.rxbinding3:rxbinding-core:$versions.rxBinding"
rxBinding.viewpager = "com.jakewharton.rxbinding3:rxbinding-viewpager:$versions.rxBinding"
deps.rxBinding = rxBinding

def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
kotlin.test = "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin"
kotlin.plugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
kotlin.allopen = "org.jetbrains.kotlin:kotlin-allopen:$versions.kotlin"
kotlin.coroutines_core = "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"
kotlin.coroutines_android = "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"
deps.kotlin = kotlin
deps.paging = "android.arch.paging:runtime:$versions.paging"

def glide = [:]
glide.runtime = "com.github.bumptech.glide:glide:$versions.glide"
glide.compiler = "com.github.bumptech.glide:compiler:$versions.glide"
deps.glide = glide
deps.dexmaker = "com.linkedin.dexmaker:dexmaker-mockito:$versions.dexmaker"
deps.constraint_layout = "com.android.support.constraint:constraint-layout:$versions.constraint_layout"
deps.timber = "com.jakewharton.timber:timber:$versions.timber"
deps.junit = "junit:junit:$versions.junit"
deps.mock_web_server = "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"
deps.rxjava2 = "io.reactivex.rxjava2:rxjava:$versions.rxjava2"
deps.rxkotlin = "io.reactivex.rxjava2:rxkotlin:2.2.0"
deps.rx_android = "io.reactivex.rxjava2:rxandroid:$versions.rx_android"
deps.hamcrest = "org.hamcrest:hamcrest-all:$versions.hamcrest"
deps.android_gradle_plugin = "com.android.tools.build:gradle:$versions.android_gradle_plugin"
deps.mosby3 = 'com.hannesdorfmann.mosby3:mvi:3.1.0'
deps.robolectric = "org.robolectric:robolectric:4.0"
deps.mock_kotlin = 'com.nhaarman:mockito-kotlin-kt1.1:1.5.0'

deps.stetho = 'com.facebook.stetho:stetho:1.5.0'
deps.flexbox = 'com.google.android:flexbox:1.0.0'
deps.kluent = "org.amshove.kluent:kluent:${versions.kluent}"
deps.kluentAndroid = "org.amshove.kluent:kluent-android:${versions.kluent}"
deps.stepper = "com.stepstone.stepper:material-stepper:4.3.1"
deps.preferenceHolder = "com.marcinmoskala.PreferenceHolder:preferenceholder:1.51"
deps.gson = "com.google.code.gson:gson:2.8.5"
deps.kluent = "org.amshove.kluent:kluent:1.41"
deps.uiautomator = "com.android.support.test.uiautomator:uiautomator-v18:2.1.2"
deps.kakao = "com.agoda.kakao:kakao:1.4.0-androidx"
deps.core_ktx = "androidx.core:core-ktx:1.0.0"
ext.deps = deps

def build_versions = [:]
build_versions.min_sdk = 21
build_versions.target_sdk = 28
build_versions.build_tools = "28.0.3"
ext.build_versions = build_versions

def work = [:]
work.runtime = "android.arch.work:work-runtime:$versions.work"
work.testing = "android.arch.work:work-testing:$versions.work"
work.firebase = "android.arch.work:work-firebase:$versions.work"
work.runtime_ktx = "android.arch.work:work-runtime-ktx:$versions.work"
deps.work = work

def leakcanary = [:]
leakcanary.debug = "com.squareup.leakcanary:leakcanary-android:$versions.leakcanary"
leakcanary.release = "com.squareup.leakcanary:leakcanary-android-no-op:$versions.leakcanary"
leakcanary.fragment = "com.squareup.leakcanary:leakcanary-support-fragment:$versions.leakcanary"
deps.leakcanary = leakcanary

def locksecure = [:]
locksecure.pattern = "com.andrognito.patternlockview:patternlockview:$versions.pattern"
locksecure.rxpattern = "com.andrognito.patternlockview:patternlockview-reactive:$versions.pattern"
locksecure.pin = 'com.andrognito.pinlockview:pinlockview:2.1.0'
locksecure.rxfingerprint = 'com.mtramin:rxfingerprint:2.2.1'
deps.locksecure = locksecure

def navigation = [:]
//navigation.runtime = "android.arch.navigation:navigation-runtime:$versions.navigation"
navigation.runtime_ktx = "android.arch.navigation:navigation-runtime-ktx:$versions.navigation"
//navigation.fragment = "android.arch.navigation:navigation-fragment:$versions.navigation"
navigation.fragment_ktx = "android.arch.navigation:navigation-fragment-ktx:$versions.navigation"
navigation.ui_ktx = "android.arch.navigation:navigation-ui-ktx:$versions.navigation"
navigation.safe_args_plugin = "android.arch.navigation:navigation-safe-args-gradle-plugin:$versions.navigation"
navigation.testing_ktx = "android.arch.navigation:navigation-testing-ktx:$versions.navigation_testing"
deps.navigation = navigation


ext.deps = deps

def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    handler.maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

ext.addRepos = this.&addRepos